<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Derek Kozel]]></title>
  <link href="http://dkozel.github.io/atom.xml" rel="self"/>
  <link href="http://dkozel.github.io/"/>
  <updated>2015-08-10T05:52:13-07:00</updated>
  <id>http://dkozel.github.io/</id>
  <author>
    <name><![CDATA[Derek Kozel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Basic Quadcopter Build]]></title>
    <link href="http://dkozel.github.io/blog/basic-quadcopter-build/"/>
    <updated>2015-08-05T06:19:21-07:00</updated>
    <id>http://dkozel.github.io/blog/basic-quadcopter-build</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pelco Pan Tilt Head]]></title>
    <link href="http://dkozel.github.io/blog/pelco-pan-tilt-head/"/>
    <updated>2015-08-05T06:18:48-07:00</updated>
    <id>http://dkozel.github.io/blog/pelco-pan-tilt-head</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using an OpenPGP Card]]></title>
    <link href="http://dkozel.github.io/blog/using-an-openpgp-card/"/>
    <updated>2014-12-26T09:21:52-08:00</updated>
    <id>http://dkozel.github.io/blog/using-an-openpgp-card</id>
    <content type="html"><![CDATA[<p>I bought an <a href="http://g10code.com/p-card.html">OpenPGP card</a> earlier this year and created a new GPG key (<a href="http://www.derekkozel.com/2642D337.asc">2642D337</a>) during IETF 89. I’ve been using that key to sign git commits, ssh, and sign/encrypt significant emails and files. However I locked the card on purpose while experimenting with it and then encountered problems unlocking and reloading it. Since then the card has been taking up space in my wallet. Yesterday I was lounging and decided to look at my GPG setup and get the card working.</p>

<!-- more -->

<p>Werner Koch helpfully supplied <a href="http://lists.gnupg.org/pipermail/gnupg-users/2009-September/037413.html" title="Resetting an OpenGPG Card">simple instructions</a> on resetting an OpenGPG 2.0 card on the GnuPG mailing list. The idea is quite simple, completely lock the card by trying incorrect admin and user PINs then terminate and reactivate the card. Unfortunately this is done using gpg-connect-agent which was producing error messages for me.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ gpg-connect-agent --hex
</span><span class="line">gpg-connect-agent: can&#39;t connect to the agent: IPC connect call failed</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Daniel at Ozone Solutions has a good post about the basic setup of using the OpenGPG card with Ubuntu and has an update for Ubuntu 14.04 pointing out that there’s an issue with gpg-agent not running correctly. The solution is to ensure that one and only one gpg-agent daemon is running at a time and that the environment is correctly initialized. I added the following block to my .bash_local file which is sourced from <code>.bashrc</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>.bash_local</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="k">if</span> <span class="o">[</span> ! -f /tmp/gpg-agent.env <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class="line">        killall gpg-agent<span class="p">;</span>
</span><span class="line">        <span class="nb">eval</span> <span class="k">$(</span>gpg-agent --daemon --enable-ssh-support <span class="p">&amp;</span>gt<span class="p">;</span> /tmp/gpg-agent.env<span class="k">)</span><span class="p">;</span>
</span><span class="line"><span class="k">fi</span>
</span><span class="line">. /tmp/gpg-agent.env
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This fixed the gpg-connect-agent IPC error allowing me to successfully run the reset commands on the card.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>gpg-connect-agent --hex <span class="p">&amp;</span>lt<span class="p">;</span> cardresetcommands
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>cardresetcommands</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">/hex
</span><span class="line">scd serialno
</span><span class="line">scd apdu 00 20 00 81 08 40 40 40 40 40 40 40 40
</span><span class="line">scd apdu 00 20 00 81 08 40 40 40 40 40 40 40 40
</span><span class="line">scd apdu 00 20 00 81 08 40 40 40 40 40 40 40 40
</span><span class="line">scd apdu 00 20 00 81 08 40 40 40 40 40 40 40 40
</span><span class="line">scd apdu 00 20 00 83 08 40 40 40 40 40 40 40 40
</span><span class="line">scd apdu 00 20 00 83 08 40 40 40 40 40 40 40 40
</span><span class="line">scd apdu 00 20 00 83 08 40 40 40 40 40 40 40 40
</span><span class="line">scd apdu 00 20 00 83 08 40 40 40 40 40 40 40 40
</span><span class="line">scd apdu 00 e6 00 00
</span><span class="line">scd apdu 00 44 00 00
</span><span class="line">/echo card has been reset to factory defaults</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You should see 69 83 and 90 00 replies amongst the response indicating that the PIN tries have been exhausted and the card has been terminated and reactivated. It took several tries for me to get those responses. You can check the status of the card at any point.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>gpg2 --card-status <span class="p">|</span> grep retry
</span><span class="line">PIN retry counter : <span class="m">3</span> <span class="m">3</span> 3
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The first counter is the user pin, then reset code, then the admin pin. The script should reduce user and admin to zero, then reset the card returning all three to 3. You can enter the commands by hand as necessary. I also had to run the last two commands by hand. Your mileage may vary. The default pins are 123456 for the user and 12345678 for the admin.</p>

<p>Your name, url of your public key, preferred language, login name, and whether to require a fresh pin entry for every signature can be set using <code>gpg2 --card-edit</code>. The various guides referenced here have detailed descriptions of configuring the card and keys so I won’t repeat it. However here’s a <a href="https://www.gnupg.org/howtos/card-howto/en/ch03s03.html" title="GPG Card Administration">command reference</a> for the impatient.</p>

<p>At this point you can load your (sub)key(s) onto the card. <a href="https://help.riseup.net/en/security/message-security/openpgp/best-practices" title="PGP best practices">Riseup</a> has a list of tests you should run on your key if you have already generated one and good instructions if you haven’t. My key fails several of the tests due to issues such as subkeys being self-signed using SHA1, however I don’t see this as a critical enough issue for me to regenerate the keys at this point as none of my uses require the highest degree of verification. But it’s always good to know where the weaknesses in your security plan are. At the end is a reference <code>gpg.conf</code> file with the recommended settings. Ana Guerrero has posted a succinct and, in my non-expert view, complete <a href="http://ekaia.org/blog/2009/05/10/creating-new-gpgkey/" title="Key generation guide">guide</a> for creating a secure modern key.</p>

<p>Don’t forget to backup your private key somewhere safe. Printed on paper is a good method, but a LUKS encrypted volume is a much more convenient, but still quite secure, method of digitally backing it up. Chris Boots has posted a <a href="http://www.bootc.net/archives/2013/06/07/generating-a-new-gnupg-key/" title="Secure digital backups">nice guide</a> for both generating keys, backing them up, and loading them onto a smartcard. He does miss changing the hashing algorithms though.</p>

<p>If you already have your key generated and wish to use the LUKS backup method, just follow Chris’ guide until you have created the backup volume then instead of generating a new key import your existing one. Then close the volume as Chris describes.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>gpg2 --export-secret-keys <span class="o">{</span>KEYID<span class="o">}</span> <span class="p">&amp;</span>gt<span class="p">;</span> <span class="o">{</span>KEYID<span class="o">}</span>.private.key
</span><span class="line"><span class="nv">$ </span>gpg2 --export <span class="o">{</span>KEYID<span class="o">}</span> <span class="p">&amp;</span>gt<span class="p">;</span> <span class="o">{</span>KEYID<span class="o">}</span> <span class="p">&amp;</span>gt<span class="p">;</span> <span class="o">{</span>KEYID<span class="o">}</span>.public.key
</span><span class="line"><span class="nv">$ </span><span class="nb">export </span><span class="nv">GNUPGHOME</span><span class="o">=</span>/mnt/gpg-key-backup/gnupghome
</span><span class="line"><span class="nv">$ </span>gpg2 --allow-secret-key-import --import *.key
</span><span class="line"><span class="nv">$ </span><span class="nb">unset </span>GNUPGHOME
</span><span class="line"><span class="nv">$ </span>shred *.key
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The final step that I took was to add a photo to my key. The recommended size is 240x288 and as the image is distributed with the public key it is useful to minimize the filesize. I used Shotwell to crop the image with the above aspect ratio, convert to resize it, and trimage to compress it. The final size was 14KB which under doubles the size of the total key as I have four 4KB keys, even on a mobile connection this shouldn’t be any problem.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>shotwell dkozel_casual.jpg
</span><span class="line"><span class="nv">$ </span>convert dkozel_casual.jpg -resize 240x288 dkozel_casual.jpg
</span><span class="line"><span class="nv">$ </span>trimage -f dkozel_casual.jpg
</span><span class="line"><span class="nv">$ </span>gpg2 --edit-key <span class="o">{</span>KEYID<span class="o">}</span>
</span><span class="line">...
</span><span class="line">gpg<span class="p">&amp;</span>gt<span class="p">;</span> addphoto
</span><span class="line">...
</span><span class="line">gpg<span class="p">&amp;</span>gt<span class="p">;</span> showphoto
</span><span class="line">gpg<span class="p">&amp;</span>gt<span class="p">;</span> save
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="further-references">Further References</h3>

<ul>
  <li>https://alexcabal.com/creating-the-perfect-gpg-keypair/</li>
  <li>http://anthon.home.xs4all.nl/rants/2014/setting_up_an_openpgp_smartcard_with_gnupg/</li>
  <li>http://www.narf.ssji.net/~shtrom/wiki/tips/openpgpsmartcard</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Latex in Octopress]]></title>
    <link href="http://dkozel.github.io/blog/latex-in-octopress/"/>
    <updated>2014-07-08T18:21:23-07:00</updated>
    <id>http://dkozel.github.io/blog/latex-in-octopress</id>
    <content type="html"><![CDATA[<p>Many of the topics I work with involve math left, right, and center. Being able to use <script type="math/tex">\LaTeX</script> is a big feature for me so here’s the solution I’ve come up with so far. Credit certainly goes to  <a href="http://drz.ac/2013/01/03/blogging-with-math/">Dr Zac</a> and <a href="http://www.idryman.org/blog/2012/03/10/writing-math-equations-on-octopress/">Felix</a> for their work getting Latex playing nice. I believe that Zac’s is the more correct solution given its use of the custom header file rather than modifying the default layout. However Felix has the fix for a bug in MathJax which otherwise turns the entire page white when viewing an equation’s source.
<!--more--></p>

<p>The first step is to change the Markdown processor to be kramdown (or pandoc if you prefer, see Dr Zac’s page) as it supports Latex.</p>

<ul>
  <li>In <code>Gemfile</code> replace <code>rdiscount</code> with <code>kramdown</code> and remove the version requirement.</li>
  <li>In <code>_config.yml</code> replace <code>rdiscount</code> with <code>kramdown</code> as the markdown parser</li>
  <li>Run <code>bundle install</code> to install Kramdown if necessary.</li>
</ul>

<p>Now add the <a href="http://www.mathjax.org/">MathJax</a> script to each page’s header</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>source/_includes/custom/head.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;!--- MathJax Configuration --&gt;
</span><span class="line">&lt;script type="text/javascript"
</span><span class="line">src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"&gt;
</span><span class="line">&lt;/script&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Finally fix the MathJax right click bug if necessary. I’m using the <a href="https://github.com/vladigleba/readify">readify</a> theme which doesn’t trigger the bug, however the default theme does.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>sass/base/_theme.scss</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sass"><span class="line"><span class="nt">body</span> <span class="err">{</span>
</span><span class="line">  <span class="o">&gt;</span> <span class="nt">div</span> <span class="err">{</span>
</span><span class="line">    <span class="na">background</span><span class="o">:</span> <span class="nv">$sidebar-bg</span> <span class="nv">$noise-bg</span><span class="err">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>needs to be changed to</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sass"><span class="line"><span class="nt">body</span> <span class="err">{</span>
</span><span class="line">  <span class="o">&gt;</span> <span class="nt">div</span><span class="nn">#main</span> <span class="err">{</span>
</span><span class="line">    <span class="na">background</span><span class="o">:</span> <span class="nv">$sidebar-bg</span> <span class="nv">$noise-bg</span><span class="err">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And the result, an attractive Fourier Transform equation</p>

<script type="math/tex; mode=display">F(\omega) = \int_{-\infty}^\infty f(t) e^{-i \omega t} dt.</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Project Bankruptcy]]></title>
    <link href="http://dkozel.github.io/blog/project-bankruptcy/"/>
    <updated>2014-07-08T17:37:26-07:00</updated>
    <id>http://dkozel.github.io/blog/project-bankruptcy</id>
    <content type="html"><![CDATA[<p>Most engineers, and probably most people in general, will be familiar with how projects and tasks accumulate. Finishing university and moving three times in two months has pushed my todo list past the end of the page. I sat down today and wrote down everything I could think of that I wished, or was obliged, to accomplish in the next month and have to admit that some (many) of the project ideas that float through my head simply aren’t going to get done.
<!--more--></p>

<p>I already did a cull of the project list in May when I was packing to move out of my apartment in Mountain View. I’m happy to say that my workbench did see a lot of use over the last year and that many projects did get finished. However almost an equal number stalled out for lack of a part, a gap in my knowledge which turned into a rabbit hole spawning new projects, or simply because there are only so many hours in a day. So nearly all of the physical items attached to zombie projects were given away or recycled. Now the time has come to reap the list again and start fresh (mostly).</p>

<p>I’m declaring Project Bankruptcy, inspired by <a href="http://en.wikipedia.org/wiki/Email_bankruptcy">Email Bankruptcy</a>. Unless I have made an explicit commitment to complete a task or have a continuing duty to support a system, its all being dropped. Some of the dropped projects will bounce right back onto my list because of their immediate relevance (such as figuring out the dynamic dns settings of our new router) and that’s fine. But so many of these projects and tasks are no longer (or never were) important and are just mental cruft.</p>

<p>One of the few visible changes as a result of this will be the clearing out of past, partially completed posts on this blog and the removal of a number of public repositories that aren’t relevant to anyone. Sorry if anyone misses something.</p>
]]></content>
  </entry>
  
</feed>
